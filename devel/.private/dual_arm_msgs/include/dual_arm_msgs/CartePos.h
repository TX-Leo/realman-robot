// Generated by gencpp from file dual_arm_msgs/CartePos.msg
// DO NOT EDIT!


#ifndef DUAL_ARM_MSGS_MESSAGE_CARTEPOS_H
#define DUAL_ARM_MSGS_MESSAGE_CARTEPOS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace dual_arm_msgs
{
template <class ContainerAllocator>
struct CartePos_
{
  typedef CartePos_<ContainerAllocator> Type;

  CartePos_()
    : Pose()  {
    }
  CartePos_(const ContainerAllocator& _alloc)
    : Pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _Pose_type;
  _Pose_type Pose;





  typedef boost::shared_ptr< ::dual_arm_msgs::CartePos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dual_arm_msgs::CartePos_<ContainerAllocator> const> ConstPtr;

}; // struct CartePos_

typedef ::dual_arm_msgs::CartePos_<std::allocator<void> > CartePos;

typedef boost::shared_ptr< ::dual_arm_msgs::CartePos > CartePosPtr;
typedef boost::shared_ptr< ::dual_arm_msgs::CartePos const> CartePosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dual_arm_msgs::CartePos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dual_arm_msgs::CartePos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dual_arm_msgs::CartePos_<ContainerAllocator1> & lhs, const ::dual_arm_msgs::CartePos_<ContainerAllocator2> & rhs)
{
  return lhs.Pose == rhs.Pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dual_arm_msgs::CartePos_<ContainerAllocator1> & lhs, const ::dual_arm_msgs::CartePos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dual_arm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dual_arm_msgs::CartePos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dual_arm_msgs::CartePos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dual_arm_msgs::CartePos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dual_arm_msgs::CartePos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dual_arm_msgs::CartePos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dual_arm_msgs::CartePos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dual_arm_msgs::CartePos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db774e2f8d3bbd66cc277b8a8ce62817";
  }

  static const char* value(const ::dual_arm_msgs::CartePos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb774e2f8d3bbd66ULL;
  static const uint64_t static_value2 = 0xcc277b8a8ce62817ULL;
};

template<class ContainerAllocator>
struct DataType< ::dual_arm_msgs::CartePos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dual_arm_msgs/CartePos";
  }

  static const char* value(const ::dual_arm_msgs::CartePos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dual_arm_msgs::CartePos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose Pose\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::dual_arm_msgs::CartePos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dual_arm_msgs::CartePos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartePos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dual_arm_msgs::CartePos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dual_arm_msgs::CartePos_<ContainerAllocator>& v)
  {
    s << indent << "Pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.Pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUAL_ARM_MSGS_MESSAGE_CARTEPOS_H
