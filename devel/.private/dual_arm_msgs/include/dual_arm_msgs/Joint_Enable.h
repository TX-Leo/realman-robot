// Generated by gencpp from file dual_arm_msgs/Joint_Enable.msg
// DO NOT EDIT!


#ifndef DUAL_ARM_MSGS_MESSAGE_JOINT_ENABLE_H
#define DUAL_ARM_MSGS_MESSAGE_JOINT_ENABLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dual_arm_msgs
{
template <class ContainerAllocator>
struct Joint_Enable_
{
  typedef Joint_Enable_<ContainerAllocator> Type;

  Joint_Enable_()
    : joint_num(0)
    , state(false)  {
    }
  Joint_Enable_(const ContainerAllocator& _alloc)
    : joint_num(0)
    , state(false)  {
  (void)_alloc;
    }



   typedef uint8_t _joint_num_type;
  _joint_num_type joint_num;

   typedef uint8_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> const> ConstPtr;

}; // struct Joint_Enable_

typedef ::dual_arm_msgs::Joint_Enable_<std::allocator<void> > Joint_Enable;

typedef boost::shared_ptr< ::dual_arm_msgs::Joint_Enable > Joint_EnablePtr;
typedef boost::shared_ptr< ::dual_arm_msgs::Joint_Enable const> Joint_EnableConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dual_arm_msgs::Joint_Enable_<ContainerAllocator1> & lhs, const ::dual_arm_msgs::Joint_Enable_<ContainerAllocator2> & rhs)
{
  return lhs.joint_num == rhs.joint_num &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dual_arm_msgs::Joint_Enable_<ContainerAllocator1> & lhs, const ::dual_arm_msgs::Joint_Enable_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dual_arm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab2d35ff908d2a87842afeb3b5107389";
  }

  static const char* value(const ::dual_arm_msgs::Joint_Enable_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab2d35ff908d2a87ULL;
  static const uint64_t static_value2 = 0x842afeb3b5107389ULL;
};

template<class ContainerAllocator>
struct DataType< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dual_arm_msgs/Joint_Enable";
  }

  static const char* value(const ::dual_arm_msgs::Joint_Enable_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#对指定关节进行使能操作\n"
"uint8 joint_num     #对应关节序号，从基座到机械臂手爪端，序号依次为1～6\n"
"bool state          #true-上使能，false-掉使能\n"
;
  }

  static const char* value(const ::dual_arm_msgs::Joint_Enable_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_num);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Joint_Enable_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dual_arm_msgs::Joint_Enable_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dual_arm_msgs::Joint_Enable_<ContainerAllocator>& v)
  {
    s << indent << "joint_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_num);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUAL_ARM_MSGS_MESSAGE_JOINT_ENABLE_H
